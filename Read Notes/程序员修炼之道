>程序员修炼之道

# 第1章: 注重实效的哲学

* 负责: 对错误负责，并提供各种选择，不要找蹩脚的接口。
* 破窗户: 不要留着软件当中的“破窗户”(低劣的设计，错误决策，糟糕的代码)。一旦有一个破窗户出现，那么整个应用的质量就会开始不断下滑。
* 石头汤: 当你想要开始某件事情的时候，最好的办法就是直接由你启动，当第一步跨出之后，别人才会慢慢的来完善它。
* 足够好的软件: 使代码质量编程需求问题，一个不完美但是了不起的软件，比完美但是迟来的软件要好，你需要在精益求精的道路上懂得何时应该止步。
* 知识资产
	* 经营
		* 定期投资: 定期学习，进步。
		* 多元化
		* 风险管理: 做好选择
		* 低买高卖: 在技术流行之前就对它开始学习。
		* 重新评估和平衡
	* 目标
		* 每年至少学习一种新语言
		* 每季度阅读一本技术书籍
		* 也要阅读非技术书籍
		* 上课
		* 参加本地用户组织
		* 试验不同的环境
		* 跟上潮流
		* 上网，论坛
* 交流
	* 知道你想要说什么
	* 了解你的听众
	* 选择时机
	* 选择风格
	* 让文档美观
	* 让听众参与
	* 做倾听者
	* 回复他人

# 注重实效的途径

* DRY: don't repeat yourself. 系统中的每一项知识都必须要有单一，无歧义，权威的表示。
* 正交性: 不依赖性和解耦性。如果两个或更多事物中的一个发生变化，不会影响其他事物，这些就是正交的。正交的组件应该独立，单一，具有良好的定义(内聚)，与其他组件相互隔离。
* 可撤销性: 代码应该不存在最终决策，随时都有可以撤销替换的能力，甚至架构都要灵活。
* 曳光弹: 类似于原型但不同于原型，原型演示完就扔，曳光弹更像是一个基础功能的骨架，快速的开发，更改，然后扩展成最终的应用。
* 原型: 用过就扔，粗糙的代码，或者图画，只是为了确定最终方案而采取的快速廉价的中间示例。

